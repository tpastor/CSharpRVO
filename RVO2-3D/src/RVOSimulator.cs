/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RVOSimulator : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RVOSimulator(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RVOSimulator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RVOSimulator() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          RVO3DSimulatorPINVOKE.delete_RVOSimulator(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public RVOSimulator() : this(RVO3DSimulatorPINVOKE.new_RVOSimulator__SWIG_0(), true) {
  }

  public RVOSimulator(float timeStep, float neighborDist, uint maxNeighbors, float timeHorizon, float radius, float maxSpeed, SWIGTYPE_p_Vector3 velocity) : this(RVO3DSimulatorPINVOKE.new_RVOSimulator__SWIG_1(timeStep, neighborDist, maxNeighbors, timeHorizon, radius, maxSpeed, SWIGTYPE_p_Vector3.getCPtr(velocity)), true) {
    if (RVO3DSimulatorPINVOKE.SWIGPendingException.Pending) throw RVO3DSimulatorPINVOKE.SWIGPendingException.Retrieve();
  }

  public RVOSimulator(float timeStep, float neighborDist, uint maxNeighbors, float timeHorizon, float radius, float maxSpeed) : this(RVO3DSimulatorPINVOKE.new_RVOSimulator__SWIG_2(timeStep, neighborDist, maxNeighbors, timeHorizon, radius, maxSpeed), true) {
  }

  public uint addAgent(SWIGTYPE_p_Vector3 position) {
    uint ret = RVO3DSimulatorPINVOKE.RVOSimulator_addAgent__SWIG_0(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(position));
    if (RVO3DSimulatorPINVOKE.SWIGPendingException.Pending) throw RVO3DSimulatorPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addAgent(SWIGTYPE_p_Vector3 position, float neighborDist, uint maxNeighbors, float timeHorizon, float radius, float maxSpeed, SWIGTYPE_p_Vector3 velocity) {
    uint ret = RVO3DSimulatorPINVOKE.RVOSimulator_addAgent__SWIG_1(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(position), neighborDist, maxNeighbors, timeHorizon, radius, maxSpeed, SWIGTYPE_p_Vector3.getCPtr(velocity));
    if (RVO3DSimulatorPINVOKE.SWIGPendingException.Pending) throw RVO3DSimulatorPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint addAgent(SWIGTYPE_p_Vector3 position, float neighborDist, uint maxNeighbors, float timeHorizon, float radius, float maxSpeed) {
    uint ret = RVO3DSimulatorPINVOKE.RVOSimulator_addAgent__SWIG_2(swigCPtr, SWIGTYPE_p_Vector3.getCPtr(position), neighborDist, maxNeighbors, timeHorizon, radius, maxSpeed);
    if (RVO3DSimulatorPINVOKE.SWIGPendingException.Pending) throw RVO3DSimulatorPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void doStep() {
    RVO3DSimulatorPINVOKE.RVOSimulator_doStep(swigCPtr);
  }

  public uint getAgentAgentNeighbor(uint agentNo, uint neighborNo) {
    uint ret = RVO3DSimulatorPINVOKE.RVOSimulator_getAgentAgentNeighbor(swigCPtr, agentNo, neighborNo);
    return ret;
  }

  public uint getAgentMaxNeighbors(uint agentNo) {
    uint ret = RVO3DSimulatorPINVOKE.RVOSimulator_getAgentMaxNeighbors(swigCPtr, agentNo);
    return ret;
  }

  public float getAgentMaxSpeed(uint agentNo) {
    float ret = RVO3DSimulatorPINVOKE.RVOSimulator_getAgentMaxSpeed(swigCPtr, agentNo);
    return ret;
  }

  public float getAgentNeighborDist(uint agentNo) {
    float ret = RVO3DSimulatorPINVOKE.RVOSimulator_getAgentNeighborDist(swigCPtr, agentNo);
    return ret;
  }

  public uint getAgentNumAgentNeighbors(uint agentNo) {
    uint ret = RVO3DSimulatorPINVOKE.RVOSimulator_getAgentNumAgentNeighbors(swigCPtr, agentNo);
    return ret;
  }

  public uint getAgentNumORCAPlanes(uint agentNo) {
    uint ret = RVO3DSimulatorPINVOKE.RVOSimulator_getAgentNumORCAPlanes(swigCPtr, agentNo);
    return ret;
  }

  public Plane getAgentORCAPlane(uint agentNo, uint planeNo) {
    Plane ret = new Plane(RVO3DSimulatorPINVOKE.RVOSimulator_getAgentORCAPlane(swigCPtr, agentNo, planeNo), false);
    return ret;
  }

  public SWIGTYPE_p_Vector3 getAgentPosition(uint agentNo) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(RVO3DSimulatorPINVOKE.RVOSimulator_getAgentPosition(swigCPtr, agentNo), false);
    return ret;
  }

  public SWIGTYPE_p_Vector3 getAgentPrefVelocity(uint agentNo) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(RVO3DSimulatorPINVOKE.RVOSimulator_getAgentPrefVelocity(swigCPtr, agentNo), false);
    return ret;
  }

  public float getAgentRadius(uint agentNo) {
    float ret = RVO3DSimulatorPINVOKE.RVOSimulator_getAgentRadius(swigCPtr, agentNo);
    return ret;
  }

  public float getAgentTimeHorizon(uint agentNo) {
    float ret = RVO3DSimulatorPINVOKE.RVOSimulator_getAgentTimeHorizon(swigCPtr, agentNo);
    return ret;
  }

  public SWIGTYPE_p_Vector3 getAgentVelocity(uint agentNo) {
    SWIGTYPE_p_Vector3 ret = new SWIGTYPE_p_Vector3(RVO3DSimulatorPINVOKE.RVOSimulator_getAgentVelocity(swigCPtr, agentNo), false);
    return ret;
  }

  public float getGlobalTime() {
    float ret = RVO3DSimulatorPINVOKE.RVOSimulator_getGlobalTime(swigCPtr);
    return ret;
  }

  public uint getNumAgents() {
    uint ret = RVO3DSimulatorPINVOKE.RVOSimulator_getNumAgents(swigCPtr);
    return ret;
  }

  public float getTimeStep() {
    float ret = RVO3DSimulatorPINVOKE.RVOSimulator_getTimeStep(swigCPtr);
    return ret;
  }

  public void removeAgent(uint agentNo) {
    RVO3DSimulatorPINVOKE.RVOSimulator_removeAgent(swigCPtr, agentNo);
  }

  public void setAgentDefaults(float neighborDist, uint maxNeighbors, float timeHorizon, float radius, float maxSpeed, SWIGTYPE_p_Vector3 velocity) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentDefaults__SWIG_0(swigCPtr, neighborDist, maxNeighbors, timeHorizon, radius, maxSpeed, SWIGTYPE_p_Vector3.getCPtr(velocity));
    if (RVO3DSimulatorPINVOKE.SWIGPendingException.Pending) throw RVO3DSimulatorPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAgentDefaults(float neighborDist, uint maxNeighbors, float timeHorizon, float radius, float maxSpeed) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentDefaults__SWIG_1(swigCPtr, neighborDist, maxNeighbors, timeHorizon, radius, maxSpeed);
  }

  public void setAgentMaxNeighbors(uint agentNo, uint maxNeighbors) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentMaxNeighbors(swigCPtr, agentNo, maxNeighbors);
  }

  public void setAgentMaxSpeed(uint agentNo, float maxSpeed) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentMaxSpeed(swigCPtr, agentNo, maxSpeed);
  }

  public void setAgentNeighborDist(uint agentNo, float neighborDist) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentNeighborDist(swigCPtr, agentNo, neighborDist);
  }

  public void setAgentPosition(uint agentNo, SWIGTYPE_p_Vector3 position) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentPosition(swigCPtr, agentNo, SWIGTYPE_p_Vector3.getCPtr(position));
    if (RVO3DSimulatorPINVOKE.SWIGPendingException.Pending) throw RVO3DSimulatorPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAgentPrefVelocity(uint agentNo, SWIGTYPE_p_Vector3 prefVelocity) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentPrefVelocity(swigCPtr, agentNo, SWIGTYPE_p_Vector3.getCPtr(prefVelocity));
    if (RVO3DSimulatorPINVOKE.SWIGPendingException.Pending) throw RVO3DSimulatorPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setAgentRadius(uint agentNo, float radius) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentRadius(swigCPtr, agentNo, radius);
  }

  public void setAgentTimeHorizon(uint agentNo, float timeHorizon) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentTimeHorizon(swigCPtr, agentNo, timeHorizon);
  }

  public void setAgentVelocity(uint agentNo, SWIGTYPE_p_Vector3 velocity) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setAgentVelocity(swigCPtr, agentNo, SWIGTYPE_p_Vector3.getCPtr(velocity));
    if (RVO3DSimulatorPINVOKE.SWIGPendingException.Pending) throw RVO3DSimulatorPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTimeStep(float timeStep) {
    RVO3DSimulatorPINVOKE.RVOSimulator_setTimeStep(swigCPtr, timeStep);
  }

}
